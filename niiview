#!/usr/bin/env python3
''' niiview, a sixel based python tool for displaying NIfTIs'''

import os
import sys
import argparse
import matplotlib.pyplot as plt
import numpy as np
import nibabel as nb
from getkey import getkey, keys
from libsixel import sixel_output_new, sixel_dither_initialize, sixel_encode, sixel_dither_new, SIXEL_PIXELFORMAT_RGBA8888
from PIL import Image
from io import BytesIO
from matplotlib.backends.backend_agg import FigureCanvasAgg
import getopt

#### module variables ####
nifti_filename = ""
nifti_image = None
nifti_data = None # np.empty([0,0], dtype=float)
pyplot_image = None
canvas = None
# create axis
ax1 = None
ax2 = None
ax3 = None
ax4 = None
# by default, fourth_d is -1, but it saves the time-dimension if time series are given
fourth_d = -1
show = []
image_output_size = 200
canvas = ""
step_size = 10
# is the tool in the neuro-mode (one window active, cross selects slices) or is it
# open in the simple mode, where it is possible to navigate free trough the brain?
active_mode = "neuro"
active_window = 1
# if not called with --navigate, this variable gets checked to decide, if the keyboard will
# be read or if the program should be terminated.
interactive_mode = False


# plot the selected slices
def create_plot():
    global ax1, ax2, ax3, ax4
    global active_mode, interactive_mode

    # coronal
    ax1.imshow(
        nifti_data[:, show[1], :],
        aspect=nifti_image.header['pixdim'][3] / nifti_image.header['pixdim'][1],
    ).set_cmap('gray')

    # sagittal
    ax2.imshow(
        nifti_data[show[0], :, :],
        aspect=nifti_image.header['pixdim'][3] / nifti_image.header['pixdim'][2],
    ).set_cmap('gray')

    # axial
    ax3.imshow(
        nifti_data[:, :, show[2]],
        aspect=nifti_image.header['pixdim'][2] / nifti_image.header['pixdim'][1]
    ).set_cmap('gray')

    ax4.clear()
    plt.axis('off')
    if interactive_mode:
        ax4.text(
            0.15,
            0.95,
            (build_keyboard_navigation_description() + get_image_information()),
            horizontalalignment='left',
            verticalalignment='top',
            size=6,
            color='white'
                 )
    else:
        ax4.text(
            0.15,
            0.95,
            get_image_information(),
            horizontalalignment='left',
            verticalalignment='top',
            size=6,
            color='white'
                 )
    plt.subplots_adjust(left=0, bottom=0, right=1, top=1, wspace=0, hspace=0)


    # decide based on mode and active window, how to display the images
    if active_mode == "neuro":
        if   active_window == 1:
                ax1.hlines((nifti_data.shape[0]/2.), 0, int(nifti_data.shape[0]),
                            colors='white', linestyles='dotted', linewidth=1)
                ax1.vlines((nifti_data.shape[0]/2.), 0, int(nifti_data.shape[0]),
                            colors='white', linestyles='dotted', linewidth=1)
        elif active_window == 2:
                ax2.hlines((nifti_data.shape[1]/2.), 0, int(nifti_data.shape[1]),
                            colors='white', linestyles='dotted', linewidth=1)
                ax2.vlines((nifti_data.shape[1]/2.), 0, int(nifti_data.shape[1]),
                            colors='white', linestyles='dotted', linewidth=1)
        elif active_window == 3:
                ax3.hlines((nifti_data.shape[2]/2.), 0, int(nifti_data.shape[2]),
                            colors='white', linestyles='dotted', linewidth=1)
                ax3.vlines((nifti_data.shape[2]/2.), 0, int(nifti_data.shape[2]),
                            colors='white', linestyles='dotted', linewidth=1)

    elif active_mode == "simple":
                h1 = None


# build information
def build_keyboard_navigation_description():
    if nifti_image.header['dim'][0] == 4:
        return str(
            "(Q/A) -> " + str(show[1]+1)  + "/" + str(nifti_data.shape[1]) + " left\n"
            + "(W/S) -> " + str(show[0]+1)  + "/" + str(nifti_data.shape[0]) + " right\n"
            + "(E/D) -> " + str(show[2]+1)  + "/" + str(nifti_data.shape[2]) + " down\n"
            + "(T/G) -> " + str(fourth_d+1) + "/"
            + str(nifti_image.get_fdata().shape[3]) + " in time\n")
    return str(
        "(Q/A) -> " + str(show[1]+1)  + "/" + str(nifti_data.shape[1]) + " left\n"
        + "(W/S) -> " + str(show[0]+1)  + "/" + str(nifti_data.shape[0]) + " right\n"
        + "(E/D) -> " + str(show[2]+1)  + "/" + str(nifti_data.shape[2]) + " down\n"
        + "mode:" + str(active_mode) )


# Information-text about the image
def get_image_information():
    # set empty string for saving information
    info_str = "\n"

    # add path of nifti file and add empty row
    info_str = info_str + "file name: " + "\n"
    info_str = info_str + nifti_filename
    info_str = info_str + "\n\n"

    # add shape to the information
    info_str = info_str + "nifti shape:" + "\n"
    info_str = info_str + str(nifti_data.shape[0]) + " / "
    info_str = info_str + str(nifti_data.shape[1]) + " / "
    info_str = info_str + str(nifti_data.shape[2])
    # add time-information in case of 4D-nifti:
    if nifti_image.header['dim'][0] == 4:
        info_str = info_str + " / " + str(nifti_data.shape[2])
    # print empty row after shape information
    info_str = info_str + "\n\n"
    # print affine matrix
    info_str = info_str + "affine Matrix:" + "\n"
    info_str = info_str + str(nifti_image.affine)
    # return the information
    return info_str


def read_keyboard_simple_view():
    global nifti_data, fourth_d, active_mode
    # For arrows, change displayed slice.
    # "enter"-key exit the function
    key = getkey()
    # change up-right
    if key in ['w']:
        if show[0] + step_size >= nifti_data.shape[0]:
            show[0] = nifti_data.shape[0]-1
        else:
            show[0] = show[0] + step_size
    elif key in ['s']:
        if show[0] - step_size <= 0:
            show[0] = 0
        else:
            show[0] = show[0] - step_size
    # change up-left
    elif key in ['q']:
        if show[1] + step_size >= nifti_data.shape[1]:
            show[1] = nifti_data.shape[1]-1
        else:
            show[1] = show[1] + step_size
    elif key in ['a']:
        if show[1] - step_size <= 0:
            show[1] = 0
        else:
            show[1] = show[1] - step_size
    # change down-left
    elif key in ['e']:
        if show[2] + step_size >= nifti_data.shape[2]:
            show[2] = nifti_data.shape[2]-1
        else:
            show[2] = show[2] + step_size
    elif key in ['d']:
        if show[2] - step_size <= 0:
            show[2] = 0
        else:
            show[2] = show[2] - step_size
    # change point in time
    elif key in ['t']:
        if fourth_d == -1:
            return
        if fourth_d + 1 < nifti_image.get_fdata().shape[3]:
            fourth_d = fourth_d + 1
            selected_nifti_data = nifti_image.get_fdata()[:, :, :, fourth_d+1]
    elif key in ['g']:
        if fourth_d == -1:
            return
        if fourth_d - 1 >= 0:
            fourth_d = fourth_d - 1
            selected_nifti_data = nifti_image.get_fdata()[:, :, :, fourth_d-1]
    elif key in ['o']:
        active_mode = "neuro"
    else:
        interactive_mode = False
        return


def read_keyboard_neuro_view():
    global nifti_data, fourth_d, active_mode
    # For arrows, change displayed slice.
    # "enter"-key exit the function
    key = getkey()
    # change up-right
    if key in ['w']:
        if show[0] + step_size >= nifti_data.shape[0]:
            show[0] = nifti_data.shape[0]-1
        else:
            show[0] = show[0] + step_size
    elif key in ['s']:
        if show[0] - step_size <= 0:
            show[0] = 0
        else:
            show[0] = show[0] - step_size
    # change up-left
    elif key in ['q']:
        if show[1] + step_size >= nifti_data.shape[1]:
            show[1] = nifti_data.shape[1]-1
        else:
            show[1] = show[1] + step_size
    elif key in ['a']:
        if show[1] - step_size <= 0:
            show[1] = 0
        else:
            show[1] = show[1] - step_size
    # change down-left
    elif key in ['e']:
        if show[2] + step_size >= nifti_data.shape[2]:
            show[2] = nifti_data.shape[2]-1
        else:
            show[2] = show[2] + step_size
    elif key in ['d']:
        if show[2] - step_size <= 0:
            show[2] = 0
        else:
            show[2] = show[2] - step_size
    # change point in time
    elif key in ['t']:
        if fourth_d == -1:
            return
        if fourth_d + 1 < nifti_image.get_fdata().shape[3]:
            fourth_d = fourth_d + 1
            nifti_data = nifti_image.get_fdata()[:, :, :, fourth_d+1]
    elif key in ['g']:
        if fourth_d == -1:
            return
        if fourth_d - 1 >= 0:
            fourth_d = fourth_d - 1
            nifti_data = nifti_image.get_fdata()[:, :, :, fourth_d-1]
    elif key in ['o']:
       active_mode = "simple"
#       active_window = (active_window+1)%3
    else:
        interactive_mode = False
        return


# this function reads the keyboard and calls the function for creating the image.
def display_nifti():
    dither = sixel_dither_new(256)
    # create, open and show nifti in terminal
    while True:
        # create a jpg from this koordinates of the nifti
        create_plot()
        # empty buffer for image in background and for output
        bytestream = BytesIO()
        data, (width, height) = canvas.print_to_buffer()
        output = sixel_output_new(lambda data, bytestream: bytestream.write(data), bytestream)
        sixel_dither_initialize(dither, data, width, height, SIXEL_PIXELFORMAT_RGBA8888)
        sixel_encode(data, width, height, 1, dither, output)

        # if not in the interactive mode, the terminal does not need to be clean, but
        # just can print out the image, like the "cat"-tool would do
        if interactive_mode:
            os.system("clear")
        print(bytestream.getvalue().decode('ascii'))
        # if not in loop-mode, exit before reading keyboard!
        if not interactive_mode:
            return

        # wait for user to press a key.
        if active_mode == "simple":
            read_keyboard_simple_view()
        elif active_mode == "neuro":
            read_keyboard_neuro_view()

# define text for help function
def get_help():
    """
NAME
     niiview -- display NIfTI images in sixel-aware terminals.

SYNOPSIS
     niiview [--help] | [--info] [--navigate] [--size N] [--slices N,N,N]
             [--percent N,N,N] [--step_size N] nifti_file

DESCRIPTION
     niiview displays brain images from NIfTI files (compressed or uncom-
     pressed) in sixel-aware terminals. The default behavior is to display the
     middle slices; an interactive mode offering keyboard navigation is also
     available.

Options
     --help  Print a summary of niiview's options and then exit.

     --info  Print basic information about the NIfTI file.

     --navigate
             Open the image interactively, with keyboard bindings to navigate
             through the brain image.

     --size N
             Control the size of the image displayed in the terminal.

     --slices N,N,N
             Displays the brain slices at the specified coordinates x,y,z. By
             default, the middle slices of the image are displayed.

     --percent N,N,N
             Instead of showing the brain at specific slices, this option
             shows the slices in percentages. By default the middle slices
             (50,50,50) are displayed.

     --step_size N
             While in loop-mode, this option control the number of slices
             skipped each time a key is pressed. The default step_size is 10.

     nifti_file
             The NIfTI file to be displayed with niiview.  If called without
             additional arguments, the middle slices of the brain image are
             displayed and the program exits.
    """
    # returns this docstring
    return get_help.__doc__



# checks, if value is convertable to integer
def is_int(arg):
    # try to convert the value, then return True.
    try:
        int(arg)
        return True
    # if try fails, return False
    except ValueError:
        return False


def check_arg_slices(slices):
    temp_arg = slices.split(',')
    # calculate slices
    for i, elem in enumerate(temp_arg):
        # check, if the command line arg value is an int
        if not is_int(temp_arg[i]):
            print("Slice values must be Integers.\n")
            sys.exit()
        if int(temp_arg[i]) < 0 or int(temp_arg[i]) > nifti_data.shape[i]:
            print("Slice values must be at least 1 and fit to nifti size.\n"
                  + "For shape call \"niiview --info " + nifti_filename +"\"\n")
            sys.exit()
        temp_arg[i] = int(temp_arg[i])-1
        # set show to the slices, that will be shown
    if (len(temp_arg) == 3 and fourth_d == -1) or (len(temp_arg) == 4 and fourth_d == 0):
        return temp_arg
    else:
        print("Slices must be three integers for 3D or four integers for 4D images.\n")
        sys.exit()


def check_arg_percent(percent):
    is_4D = fourth_d
    temp_arg = percent.split(',')
    # calculate slices in arg[i]%
    for i, elem in enumerate(temp_arg):
        # check, if the command line arg value is an int
        if not is_int(temp_arg[i]):
            print("Percent values must be Integers.\n")
            sys.exit()
        if int(temp_arg[i]) < 0 or int(temp_arg[i]) > 100:
            print("Percent values must be between 0 and 100.\n")
            sys.exit()
        temp_arg[i] = int(nifti_data.shape[i] / 100.0 *float(temp_arg[i])) -1
    # check for errors in number of arguments
    if len(temp_arg) == 3 and is_4D == -1:
        return temp_arg
    elif len(temp_arg) == 4 and is_4D == 0:
        return temp_arg
    else:
        print("Percents must be three integers between 0 and "
              + "100 for 3D or four integers for 4D images.\n")
        sys.exit()


def check_arg_size(size_arg):
    # check if value is proper integer
    if not is_int(size_arg):
        print("size value must be an Integer.\n")
        sys.exit()
    temp_arg = int(size_arg)
    if temp_arg < 10:
        temp_arg = 10
        print("size is set to 10 (minimum size)\n")
    elif temp_arg > 200:
        temp_arg = 200
        print("size is set to 200 (maximum size)\n")
    return temp_arg


def check_arg_step_size(step_arg):
    # check if value is proper integer
    if not is_int(step_arg):
        print("step_size value must be an Integer.\n")
        sys.exit()
    temp_arg = int(step_arg)
    if temp_arg < 1:
        temp_arg = 1
        print("step_size is set to 1 (minimum size)\n")
    elif temp_arg > 300:
        temp_arg = 1000
        print("step_size is set to 1000 (maximum size)\n")
    return temp_arg


# the mainfunction of the niiview-tool
def main():
    #### set default values and variables ####
    global nifti_data, nifti_image, nifti_filename
    global ax1, ax2, ax3, ax4, show, canvas, pyplot_image
    global fourth_d, image_output_size, step_size
    global active_mode, active_window, interactive_mode

    # Try to load the nifti-data from the last argument, otherwise print help and exit
    try:
        nifti_filename = sys.argv[-1]
        nifti_image = nb.load(nifti_filename)
        # Set rounding
        np.set_printoptions(formatter={'float': lambda x: "{0:0.2f}".format(x)})
        # load 3D-image (first time point) as default in case of 4D-input
        if nifti_image.header['dim'][0] == 3:
            nifti_data = nifti_image.get_fdata()
            fourth_d = -1
        elif nifti_image.header['dim'][0] == 4:
            nifti_data = nifti_image.get_fdata()[:, :, :, 0]
            fourth_d = 0
        # Set NAN-values to 0
        nifti_data[np.isnan(nifti_data)] = 0
    except:
        print(get_help())
        return

    # starts with 1 instead of zero, cause the axis in the image are named ax1-3
    active_window = 1
    # selects middle slices as default vaulues for the koordinates
    show = [int((nifti_data.shape[0]/2)-1),
            int((nifti_data.shape[1]/2)-1),
            int((nifti_data.shape[2]/2)-1)]
    # number of voxel-slices, that pressing a key in navigate mode changes
    step_size = 10

    #### parse arguments from terminal ####
    # get arguments without spaces
    better_args = sys.argv[1:-1]
    # define arguments
    opts, args = getopt.getopt(
        # arguments to be parsed:
        better_args, "hins:s:p:s:",
        # arguments to be parsed:
        ["help", "info", "navigate", "size=", "slices=", "percent=", "step_size="]
    )

    # loop over arguments and handle them
    for opt, arg in opts:
        # print help
        if opt in ["--help", "-h"]:
            print(get_help())
            return

        # print image-information instead of image
        if opt in ["--info", "-i"]:
            print(get_image_information())
            return

        # activate the loop for the interacive mode
        elif opt in ["--navigate", "-n"]:
            interactive_mode = True

        # set size as an integer value
        elif opt in ["--size"]:
            image_output_size = check_arg_size(arg)

        # show these slices
        elif opt in ["--slices"]:
            show = check_arg_slices(arg)

        # show slices at
        elif opt in ["--percent"]:
            show = check_arg_percent(arg)

        # change step size
        elif opt in ["--step_size"]:
            step_size = check_arg_step_size(arg)

        # if the argument is unknown, do nothing with it
        else:
            return

    ##### start to load image and build output #####
    # Disable Toolbar for plots
    plt.rcParams['toolbar'] = 'None'
    # Black background
    plt.style.use('dark_background')
    # build main window and connect to a canvas
    pyplot_image = plt.figure(facecolor='black', figsize=(5, 4), dpi=image_output_size)
    canvas = FigureCanvasAgg(pyplot_image)
    # add axes
    ax1 = pyplot_image.add_subplot(2, 2, 1)
    plt.axis('off')
    ax2 = pyplot_image.add_subplot(2, 2, 2)
    plt.axis('off')
    ax3 = pyplot_image.add_subplot(2, 2, 3)
    plt.axis('off')
    ax4 = pyplot_image.add_subplot(2, 2, 4)
    plt.axis('off')


    #### open/show the image ####
    display_nifti()


# standard call
if __name__ == '__main__':
    main()
